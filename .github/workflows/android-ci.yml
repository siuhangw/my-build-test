# Name of the workflow
name: Android CI Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push events for the "main" branch
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17, which is required for modern Android builds
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Set up Gradle for caching, which speeds up future builds
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # Step 4: Decode and place the signing key
      # This step takes the Base64 secret and decodes it back into the .jks file
      - name: Decode Keystore
        run: |
          echo "${{ secrets.SIGNING_KEY_BASE64 }}" | base64 --decode > ${{ github.workspace }}/app/my-app-key.jks

      # Step 4.5: Make gradlew executable
      # On Linux runners, the gradlew script needs to be given execute permissions
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 5: Build the signed App Bundle (AAB)
      # It uses the secrets to populate the gradle properties for signing
      - name: Build with Gradle
        run: |
          ./gradlew assembleRelease \
            -PstorePassword="${{ secrets.KEYSTORE_PASSWORD }}" \
            -PkeyPassword="${{ secrets.KEY_PASSWORD }}" \
            -PkeyAlias="${{ secrets.KEY_ALIAS }}" \
            -PstoreFile=my-app-key.jks
        working-directory: ${{ github.workspace }}

      # Step 6: Upload the generated App Bundle as an artifact
      # This makes the .aab file available for download from the workflow run page
      - name: Upload AAB
        uses: actions/upload-artifact@v4
        with:
          name: app-release-bundle
          path: app/build/outputs/bundle/release/app-release*.aab
